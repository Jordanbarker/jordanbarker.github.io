Traceback (most recent call last):
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/jordanbarker/miniconda3/envs/py311/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pymc as pm
import arviz as az

# Simulated conversion data   
# Number of visitors
n_A = 1500 # A: Control group
n_B = 1500 # B: Treatment group
conversions_A = 105  # Number of conversions
conversions_B = 125

with pm.Model() as model:
    # Prior distributions for probabilities of conversion
    p_A = pm.Beta('p_A', alpha=2, beta=10)
    p_B = pm.Beta('p_B', alpha=2, beta=10)

    # Likelihood functions
    obs_A = pm.Binomial('obs_A', n=n_A, p=p_A, observed=conversions_A)
    obs_B = pm.Binomial('obs_B', n=n_B, p=p_B, observed=conversions_B)

    # Sample from the posterior using the No-U-Turn Sampler (NUTS)
    trace = pm.sample(5000, progressbar=False, return_inferencedata=True)  # Ensure InferenceData format is returned

# Plotting the posterior distributions with reference line at 0
az.plot_posterior(trace, var_names=['p_A', 'p_B'], ref_val=0)

# Calculate the probability that B is better than A
prob_B_better_than_A = np.mean(trace.posterior['p_B'].values > trace.posterior['p_A'].values)
print(f"Probability that B is better than A: {prob_B_better_than_A:.2f}")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[21], line 1[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mpymc[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpm[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01marviz[39;00m [38;5;28;01mas[39;00m [38;5;21;01maz[39;00m
[1;32m      4[0m [38;5;66;03m# Simulated conversion data   [39;00m
[1;32m      5[0m [38;5;66;03m# Number of visitors[39;00m

[0;31mModuleNotFoundError[0m: No module named 'pymc'

